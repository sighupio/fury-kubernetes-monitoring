# Copyright (c) 2017-present SIGHUP s.r.l All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

apiVersion: v1
data:
  config.yaml: |
    rules:
    - metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container!="POD"}[1m])) by
        (<<.GroupBy>>)
      name:
        as: ""
        matches: ^container_(.*)_seconds_total$
      resources:
        overrides:
          namespace:
            resource: namespace
          pod:
            resource: pod
      seriesFilters: []
      seriesQuery: '{__name__=~"^container_.*",container!="POD",namespace!="",pod!=""}'
    - metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>,container!="POD"}[1m])) by
        (<<.GroupBy>>)
      name:
        as: ""
        matches: ^container_(.*)_total$
      resources:
        overrides:
          namespace:
            resource: namespace
          pod:
            resource: pod
      seriesFilters:
      - isNot: ^container_.*_seconds_total$
      seriesQuery: '{__name__=~"^container_.*",container!="POD",namespace!="",pod!=""}'
    - metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>,container!="POD"}) by (<<.GroupBy>>)
      name:
        as: ""
        matches: ^container_(.*)$
      resources:
        overrides:
          namespace:
            resource: namespace
          pod:
            resource: pod
      seriesFilters:
      - isNot: ^container_.*_total$
      seriesQuery: '{__name__=~"^container_.*",container!="POD",namespace!="",pod!=""}'
    - metricsQuery: sum(<<.Series>>{<<.LabelMatchers>>}) by (<<.GroupBy>>)
      name:
        as: ""
        matches: ""
      resources:
        template: <<.Resource>>
      seriesFilters:
      - isNot: .*_total$
      seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
    - metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)
      name:
        as: ""
        matches: ^(.*)_total$
      resources:
        template: <<.Resource>>
      seriesFilters:
      - isNot: .*_seconds_total
      seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
    - metricsQuery: sum(rate(<<.Series>>{<<.LabelMatchers>>}[1m])) by (<<.GroupBy>>)
      name:
        as: ""
        matches: ^(.*)_seconds_total$
      resources:
        template: <<.Resource>>
      seriesFilters: []
      seriesQuery: '{namespace!="",__name__!~"^container_.*"}'
    externalRules:
    - metricsQuery: max(<<.Series>>{<<.LabelMatchers>>})
      name:
        as: $0
        matches: ^.*_queue_(length|size)$
      resources:
        overrides:
          namespace:
            resource: namespace
      seriesQuery: '{__name__=~"^.*_queue_(length|size)$",namespace!=""}'
    - metricsQuery: max(<<.Series>>{<<.LabelMatchers>>})
      name:
        as: $0
        matches: ^.*_queue$
      resources:
        overrides:
          namespace:
            resource: namespace
      seriesQuery: '{__name__=~"^.*_queue$",namespace!=""}'
    resourceRules:
      cpu:
        containerLabel: container
        containerQuery: |
          sum by (<<.GroupBy>>) (
            irate (
                container_cpu_usage_seconds_total{<<.LabelMatchers>>,container!="",pod!=""}[120s]
            )
          )
        nodeQuery: |
          sum by (<<.GroupBy>>) (
            1 - irate(
              node_cpu_seconds_total{mode="idle"}[60s]
            )
            * on(namespace, pod) group_left(node) (
              node_namespace_pod:kube_pod_info:{<<.LabelMatchers>>}
            )
          )
          or sum by (<<.GroupBy>>) (
            1 - irate(
              windows_cpu_time_total{mode="idle", job="windows-exporter",<<.LabelMatchers>>}[4m]
            )
          )
        resources:
          overrides:
            namespace:
              resource: namespace
            node:
              resource: node
            pod:
              resource: pod
      memory:
        containerLabel: container
        containerQuery: |
          sum by (<<.GroupBy>>) (
            container_memory_working_set_bytes{<<.LabelMatchers>>,container!="",pod!=""}
          )
        nodeQuery: |
          sum by (<<.GroupBy>>) (
            node_memory_MemTotal_bytes{job="node-exporter",<<.LabelMatchers>>}
            -
            node_memory_MemAvailable_bytes{job="node-exporter",<<.LabelMatchers>>}
          )
          or sum by (<<.GroupBy>>) (
            windows_cs_physical_memory_bytes{job="windows-exporter",<<.LabelMatchers>>}
            -
            windows_memory_available_bytes{job="windows-exporter",<<.LabelMatchers>>}
          )
        resources:
          overrides:
            instance:
              resource: node
            namespace:
              resource: namespace
            pod:
              resource: pod
      window: 5m
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: metrics-adapter
    app.kubernetes.io/name: prometheus-adapter
    app.kubernetes.io/part-of: kube-prometheus
    app.kubernetes.io/version: 0.12.0
  name: adapter-config
  namespace: monitoring
