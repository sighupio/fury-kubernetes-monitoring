# Copyright (c) 2017-present SIGHUP s.r.l All rights reserved.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.
---
# Source: mimir-distributed/templates/compactor/compactor-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mimir-distributed-compactor
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: compactor
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  namespace: "monitoring"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: compactor
  maxUnavailable: 1
---
# Source: mimir-distributed/templates/distributor/distributor-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mimir-distributed-distributor
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: distributor
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  namespace: "monitoring"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: distributor
  maxUnavailable: 1
---
# Source: mimir-distributed/templates/gateway/gateway-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mimir-distributed-gateway
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: gateway
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  namespace: "monitoring"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: gateway
  maxUnavailable: 1
---
# Source: mimir-distributed/templates/ingester/ingester-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mimir-distributed-ingester
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: ingester
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  namespace: "monitoring"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: ingester
  maxUnavailable: 1
---
# Source: mimir-distributed/templates/querier/querier-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mimir-distributed-querier
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: querier
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  namespace: "monitoring"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: querier
  maxUnavailable: 1
---
# Source: mimir-distributed/templates/query-frontend/query-frontend-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mimir-distributed-query-frontend
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: query-frontend
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  namespace: "monitoring"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: query-frontend
  maxUnavailable: 1
---
# Source: mimir-distributed/templates/query-scheduler/query-scheduler-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mimir-distributed-query-scheduler
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: query-scheduler
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  namespace: "monitoring"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: query-scheduler
  maxUnavailable: 1
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: mimir-distributed-store-gateway
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  namespace: "monitoring"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: store-gateway
  maxUnavailable: 1
---
# Source: mimir-distributed/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mimir-distributed
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
---
# Source: mimir-distributed/templates/gateway/nginx-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mimir-distributed-gateway-nginx
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: gateway-nginx
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  namespace: "monitoring"
data:
  nginx.conf: |
    worker_processes  5;  ## Default: 1
    error_log  /dev/stderr error;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;
    
    events {
      worker_connections  4096;  ## Default: 1024
    }
    
    http {
      client_body_temp_path /tmp/client_temp;
      proxy_temp_path       /tmp/proxy_temp_path;
      fastcgi_temp_path     /tmp/fastcgi_temp;
      uwsgi_temp_path       /tmp/uwsgi_temp;
      scgi_temp_path        /tmp/scgi_temp;
    
      default_type application/octet-stream;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
            '"$request" $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';
      access_log   /dev/stderr  main;
    
      sendfile           on;
      tcp_nopush         on;
      proxy_http_version 1.1;
      resolver kube-dns.kube-system.svc.cluster.local.;
    
      # Ensure that X-Scope-OrgID is always present, default to the no_auth_tenant for backwards compatibility when multi-tenancy was turned off.
      map $http_x_scope_orgid $ensured_x_scope_orgid {
        default $http_x_scope_orgid;
        "" "anonymous";
      }
    
      map $http_x_scope_orgid $has_multiple_orgid_headers {
        default 0;
        "~^.+,.+$" 1;
      }
    
      proxy_read_timeout 300;
      server {
        listen 8080;
        listen [::]:8080;
        client_max_body_size 540M;
    
        if ($has_multiple_orgid_headers = 1) {
            return 400 'Sending multiple X-Scope-OrgID headers is not allowed. Use a single header with | as separator instead.';
        }
    
        location = / {
          return 200 'OK';
          auth_basic off;
        }
    
        location = /ready {
          return 200 'OK';
          auth_basic off;
        }
    
        proxy_set_header X-Scope-OrgID $ensured_x_scope_orgid;
    
        # Distributor endpoints
        location /distributor {
          set $distributor mimir-distributed-distributor-headless.monitoring.svc.cluster.local.;
          proxy_pass      http://$distributor:8080$request_uri;
        }
        location = /api/v1/push {
          set $distributor mimir-distributed-distributor-headless.monitoring.svc.cluster.local.;
          proxy_pass      http://$distributor:8080$request_uri;
        }
        location /otlp/v1/metrics {
          set $distributor mimir-distributed-distributor-headless.monitoring.svc.cluster.local.;
          proxy_pass      http://$distributor:8080$request_uri;
        }
    
        # Alertmanager endpoints
        location /alertmanager {
          set $alertmanager mimir-distributed-alertmanager-headless.monitoring.svc.cluster.local.;
          proxy_pass      http://$alertmanager:8080$request_uri;
        }
        location = /multitenant_alertmanager/status {
          set $alertmanager mimir-distributed-alertmanager-headless.monitoring.svc.cluster.local.;
          proxy_pass      http://$alertmanager:8080$request_uri;
        }
        location = /multitenant_alertmanager/configs {
          set $alertmanager mimir-distributed-alertmanager-headless.monitoring.svc.cluster.local.;
          proxy_pass      http://$alertmanager:8080$request_uri;
        }
        location = /api/v1/alerts {
          set $alertmanager mimir-distributed-alertmanager-headless.monitoring.svc.cluster.local.;
          proxy_pass      http://$alertmanager:8080$request_uri;
        }
    
        # Ruler endpoints
        location /prometheus/config/v1/rules {
          set $ruler mimir-distributed-ruler.monitoring.svc.cluster.local.;
          proxy_pass      http://$ruler:8080$request_uri;
        }
        location /prometheus/api/v1/rules {
          set $ruler mimir-distributed-ruler.monitoring.svc.cluster.local.;
          proxy_pass      http://$ruler:8080$request_uri;
        }
    
        location /prometheus/api/v1/alerts {
          set $ruler mimir-distributed-ruler.monitoring.svc.cluster.local.;
          proxy_pass      http://$ruler:8080$request_uri;
        }
        location = /ruler/ring {
          set $ruler mimir-distributed-ruler.monitoring.svc.cluster.local.;
          proxy_pass      http://$ruler:8080$request_uri;
        }
    
        # Rest of /prometheus goes to the query frontend
        location /prometheus {
          set $query_frontend mimir-distributed-query-frontend.monitoring.svc.cluster.local.;
          proxy_pass      http://$query_frontend:8080$request_uri;
        }
    
        # Buildinfo endpoint can go to any component
        location = /api/v1/status/buildinfo {
          set $query_frontend mimir-distributed-query-frontend.monitoring.svc.cluster.local.;
          proxy_pass      http://$query_frontend:8080$request_uri;
        }
    
        # Compactor endpoint for uploading blocks
        location /api/v1/upload/block/ {
          set $compactor mimir-distributed-compactor.monitoring.svc.cluster.local.;
          proxy_pass      http://$compactor:8080$request_uri;
        }
      }
    }
---
# Source: mimir-distributed/templates/runtime-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mimir-distributed-runtime
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  namespace: "monitoring"
data:
  runtime.yaml: |
    
    {}
---
# Source: mimir-distributed/templates/compactor/compactor-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-compactor
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: compactor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: compactor
---
# Source: mimir-distributed/templates/continuous_test/continuous-test-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-continuous-test-headless
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: continuous-test
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: continuous-test
---
# Source: mimir-distributed/templates/distributor/distributor-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-distributor-headless
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
  namespace: "monitoring"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: distributor
---
# Source: mimir-distributed/templates/distributor/distributor-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-distributor
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: distributor
---
# Source: mimir-distributed/templates/gateway/gateway-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-gateway
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: gateway
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  type: ClusterIP
  ports:
    - port: 80
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 8080
      protocol: TCP
      name: legacy-http-metrics
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: gateway
---
# Source: mimir-distributed/templates/gossip-ring/gossip-ring-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-gossip-ring
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: gossip-ring
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  namespace: "monitoring"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: gossip-ring
      port: 7946
      appProtocol: tcp
      protocol: TCP
      targetPort: 7946
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/part-of: memberlist
---
# Source: mimir-distributed/templates/ingester/ingester-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-ingester-headless
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
  namespace: "monitoring"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: ingester
---
# Source: mimir-distributed/templates/ingester/ingester-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-ingester
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: ingester
---
# Source: mimir-distributed/templates/querier/querier-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-querier
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: querier
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: querier
---
# Source: mimir-distributed/templates/query-frontend/query-frontend-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-query-frontend
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: query-frontend
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: query-frontend
---
# Source: mimir-distributed/templates/query-scheduler/query-scheduler-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-query-scheduler-headless
  namespace: "monitoring"
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: query-scheduler
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: query-scheduler
---
# Source: mimir-distributed/templates/query-scheduler/query-scheduler-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-query-scheduler
  namespace: "monitoring"
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: query-scheduler
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: query-scheduler
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-store-gateway-headless
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
    prometheus.io/service-monitor: "false"
  annotations:
    {}
  namespace: "monitoring"
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: store-gateway
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: mimir-distributed-store-gateway
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpc
      targetPort: grpc
  selector:
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: store-gateway
---
# Source: mimir-distributed/templates/continuous_test/continuous-test-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    {}
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: continuous-test
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  name: mimir-distributed-continuous-test
  namespace: "monitoring"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: continuous-test
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-5.5.1
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: mimir-distributed
        app.kubernetes.io/version: "2.14.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: continuous-test
      annotations:
        
        checksum/config: "0"
      namespace: "monitoring"
    spec:
      serviceAccountName: mimir-distributed
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: continuous-test
          image: "grafana/mimir:2.14.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=continuous-test"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
            - "-activity-tracker.filepath="
            - "-server.http-listen-port=8080"
            - "-tests.write-read-series-test.num-series=1000"
            - "-tests.write-read-series-test.max-query-age=48h"
            - "-tests.write-endpoint=http://mimir-distributed-gateway.monitoring.svc:80"
            - "-tests.read-endpoint=http://mimir-distributed-gateway.monitoring.svc:80/prometheus"
            - "-tests.run-interval=5m"
            - "-tests.tenant-id=mimir-continuous-test"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          resources:
            limits:
              memory: 1Gi
            requests:
              cpu: "1"
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
      
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          configMap:
            name: mimir-distributed-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
---
# Source: mimir-distributed/templates/distributor/distributor-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mimir-distributed-distributor
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  # If replicas is not number (when using values file it's float64, when using --set arg it's int64) and is false (i.e. null) don't set it
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: distributor
  strategy:
    rollingUpdate:
      maxSurge: 15%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-5.5.1
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: mimir-distributed
        app.kubernetes.io/version: "2.14.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: distributor
        app.kubernetes.io/part-of: memberlist
      annotations:
        
        checksum/config: "0"
      namespace: "monitoring"
    spec:
      serviceAccountName: mimir-distributed
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: distributor
          image: "grafana/mimir:2.14.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=distributor"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
            # When write requests go through distributors via gRPC, we want gRPC clients to re-resolve the distributors DNS
            # endpoint before the distributor process is terminated, in order to avoid any failures during graceful shutdown.
            # To achieve it, we set a shutdown delay greater than the gRPC max connection age.
            - "-server.grpc.keepalive.max-connection-age=60s"
            - "-server.grpc.keepalive.max-connection-age-grace=5m"
            - "-server.grpc.keepalive.max-connection-idle=1m"
            - "-shutdown-delay=90s"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
            - name: active-queries
              mountPath: /active-query-tracker
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          env:
            - name: "GOMAXPROCS"
              value: "8"
            - name: "JAEGER_REPORTER_MAX_QUEUE_SIZE"
              value: "1000"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: mimir
            app.kubernetes.io/instance: mimir-distributed
            app.kubernetes.io/component: distributor
      terminationGracePeriodSeconds: 100
      volumes:
        - name: config
          configMap:
            name: mimir-distributed-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: runtime-config
          configMap:
            name: mimir-distributed-runtime
        - name: storage
          emptyDir: {}
        - name: active-queries
          emptyDir: {}
---
# Source: mimir-distributed/templates/gateway/gateway-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    {}
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: gateway
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  name: mimir-distributed-gateway
  namespace: "monitoring"
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: gateway
  strategy:
    rollingUpdate:
      maxSurge: 15%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-5.5.1
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: mimir-distributed
        app.kubernetes.io/version: "2.14.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: gateway
      annotations:
        checksum/config: 9f507913d4d49fed88bcb00884d8e5fcfed5c9e08619ea64b5674cdcfab37ef6
      namespace: "monitoring"
    spec:
      serviceAccountName: mimir-distributed
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: gateway
          image: docker.io/nginxinc/nginx-unprivileged:1.27-alpine
          imagePullPolicy: IfNotPresent
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: tmp
              mountPath: /tmp
            - name: docker-entrypoint-d-override
              mountPath: /docker-entrypoint.d
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 15
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: mimir
            app.kubernetes.io/instance: mimir-distributed
            app.kubernetes.io/component: gateway
      terminationGracePeriodSeconds: 30
      volumes:
        - name: config
          configMap:
            name: mimir-distributed-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: runtime-config
          configMap:
            name: mimir-distributed-runtime
        - name: nginx-config
          configMap:
            name: mimir-distributed-gateway-nginx
        - name: docker-entrypoint-d-override
          emptyDir: {}
        - name: tmp
          emptyDir: {}
---
# Source: mimir-distributed/templates/querier/querier-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mimir-distributed-querier
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: querier
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  # If replicas is not number (when using values file it's float64, when using --set arg it's int64) and is false (i.e. null) don't set it
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: querier
  strategy:
    rollingUpdate:
      maxSurge: 15%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-5.5.1
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: mimir-distributed
        app.kubernetes.io/version: "2.14.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: querier
        app.kubernetes.io/part-of: memberlist
      annotations:
        
        checksum/config: "0"
    spec:
      serviceAccountName: mimir-distributed
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: querier
          image: "grafana/mimir:2.14.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=querier"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
            - name: active-queries
              mountPath: /active-query-tracker
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          env:
            - name: "GOMAXPROCS"
              value: "5"
            - name: "JAEGER_REPORTER_MAX_QUEUE_SIZE"
              value: "5000"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: mimir
            app.kubernetes.io/instance: mimir-distributed
            app.kubernetes.io/component: querier
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          configMap:
            name: mimir-distributed-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: runtime-config
          configMap:
            name: mimir-distributed-runtime
        - name: storage
          emptyDir: {}
        - name: active-queries
          emptyDir: {}
---
# Source: mimir-distributed/templates/query-frontend/query-frontend-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mimir-distributed-query-frontend
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: query-frontend
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  # If replicas is not number (when using values file it's float64, when using --set arg it's int64) and is false (i.e. null) don't set it
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: query-frontend
  strategy:
    rollingUpdate:
      maxSurge: 15%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-5.5.1
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: mimir-distributed
        app.kubernetes.io/version: "2.14.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: query-frontend
      annotations:
        
        checksum/config: "0"
      namespace: "monitoring"
    spec:
      serviceAccountName: mimir-distributed
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: query-frontend
          image: "grafana/mimir:2.14.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=query-frontend"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
            # Reduce the likelihood of queries hitting terminated query-frontends.
            - "-server.grpc.keepalive.max-connection-age=30s"
            - "-shutdown-delay=90s"
          volumeMounts:
            - name: runtime-config
              mountPath: /var/mimir
            - name: config
              mountPath: /etc/mimir
            - name: storage
              mountPath: /data
            - name: active-queries
              mountPath: /active-query-tracker
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          env:
            - name: "JAEGER_REPORTER_MAX_QUEUE_SIZE"
              value: "5000"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: mimir
            app.kubernetes.io/instance: mimir-distributed
            app.kubernetes.io/component: query-frontend
      terminationGracePeriodSeconds: 390
      volumes:
        - name: config
          configMap:
            name: mimir-distributed-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: runtime-config
          configMap:
            name: mimir-distributed-runtime
        - name: storage
          emptyDir: {}
        - name: active-queries
          emptyDir: {}
---
# Source: mimir-distributed/templates/query-scheduler/query-scheduler-dep.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mimir-distributed-query-scheduler
  namespace: "monitoring"
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: query-scheduler
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: query-scheduler
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-5.5.1
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: mimir-distributed
        app.kubernetes.io/version: "2.14.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: query-scheduler
      annotations:
        
        checksum/config: "0"
    spec:
      serviceAccountName: mimir-distributed
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: query-scheduler
          image: "grafana/mimir:2.14.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=query-scheduler"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: runtime-config
              mountPath: /var/mimir
            - name: config
              mountPath: /etc/mimir
            - name: storage
              mountPath: /data
            - name: active-queries
              mountPath: /active-query-tracker
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: mimir
            app.kubernetes.io/instance: mimir-distributed
            app.kubernetes.io/component: query-scheduler
      terminationGracePeriodSeconds: 180
      volumes:
        - name: config
          configMap:
            name: mimir-distributed-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: runtime-config
          configMap:
            name: mimir-distributed-runtime
        - name: storage
          emptyDir: {}
        - name: active-queries
          emptyDir: {}
---
# Source: mimir-distributed/templates/gateway/gateway-v2-hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: mimir-distributed-gateway
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: gateway
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  namespace: "monitoring"
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mimir-distributed-gateway
  minReplicas: 1
  maxReplicas: 3
  metrics:
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
---
# Source: mimir-distributed/templates/compactor/compactor-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mimir-distributed-compactor
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: compactor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: compactor
  updateStrategy:
    type: RollingUpdate
  serviceName: mimir-distributed-compactor
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-5.5.1
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: mimir-distributed
        app.kubernetes.io/version: "2.14.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: compactor
        app.kubernetes.io/part-of: memberlist
      annotations:
        
        checksum/config: "0"
      namespace: "monitoring"
    spec:
      serviceAccountName: mimir-distributed
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: mimir
            app.kubernetes.io/instance: mimir-distributed
            app.kubernetes.io/component: compactor
      terminationGracePeriodSeconds: 900
      volumes:
        - name: config
          configMap:
            name: mimir-distributed-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: runtime-config
          configMap:
            name: mimir-distributed-runtime
        - name: active-queries
          emptyDir: {}
      containers:
        - name: compactor
          image: "grafana/mimir:2.14.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=compactor"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
            - name: active-queries
              mountPath: /active-query-tracker
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 60
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
---
# Source: mimir-distributed/templates/ingester/ingester-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mimir-distributed-ingester
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  podManagementPolicy: Parallel
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: ingester
  updateStrategy:
    type: RollingUpdate
  serviceName: mimir-distributed-ingester-headless
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-5.5.1
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: mimir-distributed
        app.kubernetes.io/version: "2.14.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: ingester
        app.kubernetes.io/part-of: memberlist
      annotations:
        
        checksum/config: "0"
      namespace: "monitoring"
    spec:
      serviceAccountName: mimir-distributed
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: mimir
            app.kubernetes.io/instance: mimir-distributed
            app.kubernetes.io/component: ingester
      terminationGracePeriodSeconds: 1200
      volumes:
        - name: config
          configMap:
            name: mimir-distributed-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: runtime-config
          configMap:
            name: mimir-distributed-runtime
        - name: active-queries
          emptyDir: {}
      containers:
        - name: ingester
          image: "grafana/mimir:2.14.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=ingester"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
            - "-ingester.ring.instance-availability-zone=zone-default"
            - "-server.grpc-max-concurrent-streams=500"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
            - name: active-queries
              mountPath: /active-query-tracker
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 60
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          env:
            
            - name: "GOMAXPROCS"
              value: "4"
            - name: "JAEGER_REPORTER_MAX_QUEUE_SIZE"
              value: "1000"
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mimir-distributed-store-gateway
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    {}
  namespace: "monitoring"
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: store-gateway
  updateStrategy:
    type: RollingUpdate
  serviceName: mimir-distributed-store-gateway-headless
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: storage
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: "2Gi"
  template:
    metadata:
      labels:
        helm.sh/chart: mimir-distributed-5.5.1
        app.kubernetes.io/name: mimir
        app.kubernetes.io/instance: mimir-distributed
        app.kubernetes.io/version: "2.14.0"
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: store-gateway
        app.kubernetes.io/part-of: memberlist
      annotations:
        
        checksum/config: "0"
      namespace: "monitoring"
    spec:
      serviceAccountName: mimir-distributed
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsNonRoot: true
        runAsUser: 10001
        seccompProfile:
          type: RuntimeDefault
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: mimir
            app.kubernetes.io/instance: mimir-distributed
            app.kubernetes.io/component: store-gateway
      terminationGracePeriodSeconds: 120
      volumes:
        - name: config
          configMap:
            name: mimir-distributed-config
            items:
              - key: "mimir.yaml"
                path: "mimir.yaml"
        - name: runtime-config
          configMap:
            name: mimir-distributed-runtime
        - name: active-queries
          emptyDir: {}
      containers:
        - name: store-gateway
          image: "grafana/mimir:2.14.0"
          imagePullPolicy: IfNotPresent
          args:
            - "-target=store-gateway"
            - "-config.expand-env=true"
            - "-config.file=/etc/mimir/mimir.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/mimir
            - name: runtime-config
              mountPath: /var/mimir
            - name: storage
              mountPath: "/data"
            - name: active-queries
              mountPath: /active-query-tracker
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
            - name: memberlist
              containerPort: 7946
              protocol: TCP
          livenessProbe:
            null
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 60
          resources:
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          env:
            - name: "GOMAXPROCS"
              value: "5"
            - name: "GOMEMLIMIT"
              value: "536870912"
            - name: "JAEGER_REPORTER_MAX_QUEUE_SIZE"
              value: "1000"
---
# Source: mimir-distributed/templates/minio/create-bucket-job.yaml
# Minio provides post-install hook to create bucket
# however the hook won't be executed if helm install is run
# with --wait flag. Hence this job is a workaround for that.
# See https://github.com/grafana/mimir/issues/2464
---
# Source: mimir-distributed/templates/compactor/compactor-servmon.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mimir-distributed-compactor
  namespace: "monitoring"
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: compactor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  namespaceSelector:
    matchNames:
    - monitoring
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: compactor
    matchExpressions:
      - key: prometheus.io/service-monitor
        operator: NotIn
        values:
          - "false"
  endpoints:
    - port: http-metrics
      relabelings:
        - action: replace
          sourceLabels: [job]
          replacement: "monitoring/compactor"
          targetLabel: job
        - action: replace
          replacement: "mimir-distributed"
          targetLabel: cluster
      scheme: http
---
# Source: mimir-distributed/templates/continuous_test/continuous-test-servmon.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mimir-distributed-continuous-test
  namespace: "monitoring"
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: continuous-test
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  namespaceSelector:
    matchNames:
    - monitoring
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: continuous-test
    matchExpressions:
      - key: prometheus.io/service-monitor
        operator: NotIn
        values:
          - "false"
  endpoints:
    - port: http-metrics
      relabelings:
        - action: replace
          sourceLabels: [job]
          replacement: "monitoring/continuous-test"
          targetLabel: job
        - action: replace
          replacement: "mimir-distributed"
          targetLabel: cluster
      scheme: http
---
# Source: mimir-distributed/templates/distributor/distributor-servmon.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mimir-distributed-distributor
  namespace: "monitoring"
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: distributor
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  namespaceSelector:
    matchNames:
    - monitoring
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: distributor
    matchExpressions:
      - key: prometheus.io/service-monitor
        operator: NotIn
        values:
          - "false"
  endpoints:
    - port: http-metrics
      relabelings:
        - action: replace
          sourceLabels: [job]
          replacement: "monitoring/distributor"
          targetLabel: job
        - action: replace
          replacement: "mimir-distributed"
          targetLabel: cluster
      scheme: http
---
# Source: mimir-distributed/templates/ingester/ingester-servmon.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mimir-distributed-ingester
  namespace: "monitoring"
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: ingester
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  namespaceSelector:
    matchNames:
    - monitoring
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: ingester
    matchExpressions:
      - key: prometheus.io/service-monitor
        operator: NotIn
        values:
          - "false"
  endpoints:
    - port: http-metrics
      relabelings:
        - action: replace
          sourceLabels: [job]
          replacement: "monitoring/ingester"
          targetLabel: job
        - action: replace
          replacement: "mimir-distributed"
          targetLabel: cluster
      scheme: http
---
# Source: mimir-distributed/templates/querier/querier-servmon.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mimir-distributed-querier
  namespace: "monitoring"
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: querier
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  namespaceSelector:
    matchNames:
    - monitoring
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: querier
    matchExpressions:
      - key: prometheus.io/service-monitor
        operator: NotIn
        values:
          - "false"
  endpoints:
    - port: http-metrics
      relabelings:
        - action: replace
          sourceLabels: [job]
          replacement: "monitoring/querier"
          targetLabel: job
        - action: replace
          replacement: "mimir-distributed"
          targetLabel: cluster
      scheme: http
---
# Source: mimir-distributed/templates/query-frontend/query-frontend-servmon.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mimir-distributed-query-frontend
  namespace: "monitoring"
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: query-frontend
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  namespaceSelector:
    matchNames:
    - monitoring
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: query-frontend
    matchExpressions:
      - key: prometheus.io/service-monitor
        operator: NotIn
        values:
          - "false"
  endpoints:
    - port: http-metrics
      relabelings:
        - action: replace
          sourceLabels: [job]
          replacement: "monitoring/query-frontend"
          targetLabel: job
        - action: replace
          replacement: "mimir-distributed"
          targetLabel: cluster
      scheme: http
---
# Source: mimir-distributed/templates/query-scheduler/query-scheduler-servmon.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mimir-distributed-query-scheduler
  namespace: "monitoring"
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: query-scheduler
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  namespaceSelector:
    matchNames:
    - monitoring
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: query-scheduler
    matchExpressions:
      - key: prometheus.io/service-monitor
        operator: NotIn
        values:
          - "false"
  endpoints:
    - port: http-metrics
      relabelings:
        - action: replace
          sourceLabels: [job]
          replacement: "monitoring/query-scheduler"
          targetLabel: job
        - action: replace
          replacement: "mimir-distributed"
          targetLabel: cluster
      scheme: http
---
# Source: mimir-distributed/templates/store-gateway/store-gateway-servmon.yaml
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: mimir-distributed-store-gateway
  namespace: "monitoring"
  labels:
    helm.sh/chart: mimir-distributed-5.5.1
    app.kubernetes.io/name: mimir
    app.kubernetes.io/instance: mimir-distributed
    app.kubernetes.io/component: store-gateway
    app.kubernetes.io/part-of: memberlist
    app.kubernetes.io/version: "2.14.0"
    app.kubernetes.io/managed-by: Helm
spec:
  namespaceSelector:
    matchNames:
    - monitoring
  selector:
    matchLabels:
      app.kubernetes.io/name: mimir
      app.kubernetes.io/instance: mimir-distributed
      app.kubernetes.io/component: store-gateway
    matchExpressions:
      - key: prometheus.io/service-monitor
        operator: NotIn
        values:
          - "false"
  endpoints:
    - port: http-metrics
      relabelings:
        - action: replace
          sourceLabels: [job]
          replacement: "monitoring/store-gateway"
          targetLabel: job
        - action: replace
          replacement: "mimir-distributed"
          targetLabel: cluster
      scheme: http
